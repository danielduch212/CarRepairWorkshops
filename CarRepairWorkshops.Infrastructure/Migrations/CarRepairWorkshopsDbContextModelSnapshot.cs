// <auto-generated />
using System;
using CarRepairWorkshops.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarRepairWorkshops.Infrastructure.Migrations
{
    [DbContext(typeof(CarRepairWorkshopsDbContext))]
    partial class CarRepairWorkshopsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CarRepairWorkshops.Domain.Entities.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CarBrand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarRegistrationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CarRepairWorkshopId")
                        .HasColumnType("int");

                    b.Property<string>("CarRepairWorkshopName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Engine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerTelephoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductionYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarRepairWorkshopId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("CarRepairWorkshops.Domain.Entities.CarPart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("RepairId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RepairId");

                    b.ToTable("CarPart");
                });

            modelBuilder.Entity("CarRepairWorkshops.Domain.Entities.CarRepairWorkshop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CarRepairWorkshops");
                });

            modelBuilder.Entity("CarRepairWorkshops.Domain.Entities.MechanicalService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("RepairId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RepairId");

                    b.ToTable("MechanicalService");
                });

            modelBuilder.Entity("CarRepairWorkshops.Domain.Entities.Repair", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<string>("CarRegistrationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("DateOfFinalization")
                        .HasColumnType("date");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("Repairs");
                });

            modelBuilder.Entity("CarRepairWorkshops.Domain.Entities.Car", b =>
                {
                    b.HasOne("CarRepairWorkshops.Domain.Entities.CarRepairWorkshop", null)
                        .WithMany("RepairCars")
                        .HasForeignKey("CarRepairWorkshopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarRepairWorkshops.Domain.Entities.CarPart", b =>
                {
                    b.HasOne("CarRepairWorkshops.Domain.Entities.Repair", null)
                        .WithMany("ReplacedCarParts")
                        .HasForeignKey("RepairId");
                });

            modelBuilder.Entity("CarRepairWorkshops.Domain.Entities.CarRepairWorkshop", b =>
                {
                    b.OwnsOne("CarRepairWorkshops.Domain.Entities.Address", "Address", b1 =>
                        {
                            b1.Property<int>("CarRepairWorkshopId")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PostalCode")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("CarRepairWorkshopId");

                            b1.ToTable("CarRepairWorkshops");

                            b1.WithOwner()
                                .HasForeignKey("CarRepairWorkshopId");
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("CarRepairWorkshops.Domain.Entities.MechanicalService", b =>
                {
                    b.HasOne("CarRepairWorkshops.Domain.Entities.Repair", null)
                        .WithMany("MechanicalServices")
                        .HasForeignKey("RepairId");
                });

            modelBuilder.Entity("CarRepairWorkshops.Domain.Entities.Repair", b =>
                {
                    b.HasOne("CarRepairWorkshops.Domain.Entities.Car", null)
                        .WithMany("Repairs")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarRepairWorkshops.Domain.Entities.Car", b =>
                {
                    b.Navigation("Repairs");
                });

            modelBuilder.Entity("CarRepairWorkshops.Domain.Entities.CarRepairWorkshop", b =>
                {
                    b.Navigation("RepairCars");
                });

            modelBuilder.Entity("CarRepairWorkshops.Domain.Entities.Repair", b =>
                {
                    b.Navigation("MechanicalServices");

                    b.Navigation("ReplacedCarParts");
                });
#pragma warning restore 612, 618
        }
    }
}
